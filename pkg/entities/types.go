// Code generated by tutone: DO NOT EDIT
package entities

import (
	"github.com/newrelic/newrelic-client-go/internal/serialization"
)

// EntityAlertSeverity -
type EntityAlertSeverity string

var EntityAlertSeverityTypes = struct {
	// Critical violation in progress
	CRITICAL EntityAlertSeverity
	// Not alerting
	NOT_ALERTING EntityAlertSeverity
	// No alert conditions set up
	NOT_CONFIGURED EntityAlertSeverity
	// Warning violation in progress
	WARNING EntityAlertSeverity
}{
	// Critical violation in progress
	CRITICAL: "CRITICAL",
	// Not alerting
	NOT_ALERTING: "NOT_ALERTING",
	// No alert conditions set up
	NOT_CONFIGURED: "NOT_CONFIGURED",
	// Warning violation in progress
	WARNING: "WARNING",
}

// EntityRelationshipType - The type of the relationship.
//
// For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
type EntityRelationshipType string

var EntityRelationshipTypeTypes = struct {
	// The source entity calls the target entity.
	CALLS EntityRelationshipType
	// The source entity contains the target entity
	CONTAINS EntityRelationshipType
	// The source entity hosts the target
	HOSTS EntityRelationshipType
	// The source is an Application that serves the target Browser application
	SERVES EntityRelationshipType
	// Type not known
	UNKNOWN EntityRelationshipType
}{
	// The source entity calls the target entity.
	CALLS: "CALLS",
	// The source entity contains the target entity
	CONTAINS: "CONTAINS",
	// The source entity hosts the target
	HOSTS: "HOSTS",
	// The source is an Application that serves the target Browser application
	SERVES: "SERVES",
	// Type not known
	UNKNOWN: "UNKNOWN",
}

// EntityType - The specific type of entity
type EntityType string

var EntityTypeTypes = struct {
	// An APM Application
	APM_APPLICATION_ENTITY EntityType
	// A database instance seen by an APM Application
	APM_DATABASE_INSTANCE_ENTITY EntityType
	// An external service seen by an APM Application
	APM_EXTERNAL_SERVICE_ENTITY EntityType
	// A Browser Application
	BROWSER_APPLICATION_ENTITY EntityType
	// An Insights Dashboard entity
	DASHBOARD_ENTITY EntityType
	// A Generic Entity with no detailed data
	GENERIC_ENTITY EntityType
	// An Infrastructure entity
	GENERIC_INFRASTRUCTURE_ENTITY EntityType
	// An Infrastructure Integration AWS Lambda Function entity
	INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY EntityType
	// An Infrastructure Host entity
	INFRASTRUCTURE_HOST_ENTITY EntityType
	// A Mobile Application
	MOBILE_APPLICATION_ENTITY EntityType
	// A Synthetic Monitor entity
	SYNTHETIC_MONITOR_ENTITY EntityType
	// A Third Party Service entity
	THIRD_PARTY_SERVICE_ENTITY EntityType
	// A entity that is unavailable
	UNAVAILABLE_ENTITY EntityType
	// A Workload Entity
	WORKLOAD_ENTITY EntityType
}{
	// An APM Application
	APM_APPLICATION_ENTITY: "APM_APPLICATION_ENTITY",
	// A database instance seen by an APM Application
	APM_DATABASE_INSTANCE_ENTITY: "APM_DATABASE_INSTANCE_ENTITY",
	// An external service seen by an APM Application
	APM_EXTERNAL_SERVICE_ENTITY: "APM_EXTERNAL_SERVICE_ENTITY",
	// A Browser Application
	BROWSER_APPLICATION_ENTITY: "BROWSER_APPLICATION_ENTITY",
	// An Insights Dashboard entity
	DASHBOARD_ENTITY: "DASHBOARD_ENTITY",
	// A Generic Entity with no detailed data
	GENERIC_ENTITY: "GENERIC_ENTITY",
	// An Infrastructure entity
	GENERIC_INFRASTRUCTURE_ENTITY: "GENERIC_INFRASTRUCTURE_ENTITY",
	// An Infrastructure Integration AWS Lambda Function entity
	INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY: "INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY",
	// An Infrastructure Host entity
	INFRASTRUCTURE_HOST_ENTITY: "INFRASTRUCTURE_HOST_ENTITY",
	// A Mobile Application
	MOBILE_APPLICATION_ENTITY: "MOBILE_APPLICATION_ENTITY",
	// A Synthetic Monitor entity
	SYNTHETIC_MONITOR_ENTITY: "SYNTHETIC_MONITOR_ENTITY",
	// A Third Party Service entity
	THIRD_PARTY_SERVICE_ENTITY: "THIRD_PARTY_SERVICE_ENTITY",
	// A entity that is unavailable
	UNAVAILABLE_ENTITY: "UNAVAILABLE_ENTITY",
	// A Workload Entity
	WORKLOAD_ENTITY: "WORKLOAD_ENTITY",
}

// SyntheticMonitorType - The types of Synthetic Monitors.
type SyntheticMonitorType string

var SyntheticMonitorTypeTypes = struct {
	BROWSER SyntheticMonitorType

	SCRIPT_API SyntheticMonitorType

	SCRIPT_BROWSER SyntheticMonitorType

	SIMPLE SyntheticMonitorType
}{

	BROWSER: "BROWSER",

	SCRIPT_API: "SCRIPT_API",

	SCRIPT_BROWSER: "SCRIPT_BROWSER",

	SIMPLE: "SIMPLE",
}

// WorkloadStatusSource - Indicates where the status value derives from.
type WorkloadStatusSource string

var WorkloadStatusSourceTypes = struct {
	// Refers to the result of an automatic rule defined for a workload.
	ROLLUP_RULE WorkloadStatusSource
	// Refers to a static status defined for a workload.
	STATIC WorkloadStatusSource
	// Refers to an undetermined status source.
	UNKNOWN WorkloadStatusSource
	// Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
	WORKLOAD WorkloadStatusSource
}{
	// Refers to the result of an automatic rule defined for a workload.
	ROLLUP_RULE: "ROLLUP_RULE",
	// Refers to a static status defined for a workload.
	STATIC: "STATIC",
	// Refers to an undetermined status source.
	UNKNOWN: "UNKNOWN",
	// Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
	WORKLOAD: "WORKLOAD",
}

// WorkloadStatusValue - The status of the workload, which is derived from the static and the automatic statuses configured. Any static status always overrides any other status values calculated automatically.
type WorkloadStatusValue string

var WorkloadStatusValueTypes = struct {
	// The status of the workload is degraded.
	DEGRADED WorkloadStatusValue
	// The status of the workload is disrupted.
	DISRUPTED WorkloadStatusValue
	// The status of the workload is operational.
	OPERATIONAL WorkloadStatusValue
	// The status of the workload is unknown.
	UNKNOWN WorkloadStatusValue
}{
	// The status of the workload is degraded.
	DEGRADED: "DEGRADED",
	// The status of the workload is disrupted.
	DISRUPTED: "DISRUPTED",
	// The status of the workload is operational.
	OPERATIONAL: "OPERATIONAL",
	// The status of the workload is unknown.
	UNKNOWN: "UNKNOWN",
}

// AccountOutline - The `AccountOutline` object provides basic data about an account.
type AccountOutline struct {
	//
	ID int `json:"id"`
	//
	Name string `json:"name"`
	// Returns event types that are currently reporting in the account.
	ReportingEventTypes []string `json:"reportingEventTypes"`
}

// AlertableEntity -
type AlertableEntity struct {
	// The current alerting severity of the entity
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Violations on the entity that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
}

func (x *AlertableEntity) ImplementsAlertableEntity() {}

// ApmApplicationDeployment - An APM application deployment marker
type ApmApplicationDeployment struct {
	// The changelog of the deployment
	Changelog string `json:"changelog"`
	// Description of the deployment
	Description string `json:"description"`
	// A link to view the deployment in the UI
	Permalink string `json:"permalink"`
	// The revision of the app that was deployed
	Revision string `json:"revision"`
	// The moment the deployment occured
	Timestamp EpochMilliseconds `json:"timestamp"`
	// The user who triggered the deployment
	User string `json:"user"`
}

// ApmApplicationEntity - An APM Application entity.
type ApmApplicationEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the APM Application.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Violations on the APM Application that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// Summary statistics about the Browser App injected by an APM Application.
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary"`
	// Summary statistics about the APM App.
	ApmSummary ApmApplicationSummaryData `json:"apmSummary"`
	// The ID of the APM Application.
	ApplicationID int `json:"applicationId"`
	// Deployments of the APM Application.
	Deployments []ApmApplicationDeployment `json:"deployments"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The programming language of the APM Application.
	Language *string `json:"language"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the APM Application.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The running versions of the language agent in the APM Application.
	RunningAgentVersions ApmApplicationRunningAgentVersions `json:"runningAgentVersions"`
	// Configuration settings for the APM Application
	Settings ApmApplicationSettings `json:"settings"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *ApmApplicationEntity) ImplementsApmBrowserApplicationEntity() {}

func (x *ApmApplicationEntity) ImplementsAlertableEntity() {}

func (x *ApmApplicationEntity) ImplementsEntity() {}

// ApmApplicationEntityOutline - An APM Application entity outline.
type ApmApplicationEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the APM Application.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Summary statistics about the Browser App injected by an APM Application.
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary"`
	// Summary statistics about the APM App.
	ApmSummary ApmApplicationSummaryData `json:"apmSummary"`
	// The ID of the APM Application.
	ApplicationID int `json:"applicationId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The programming language of the APM Application.
	Language *string `json:"language"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The running versions of the language agent in the APM Application.
	RunningAgentVersions ApmApplicationRunningAgentVersions `json:"runningAgentVersions"`
	// Configuration settings for the APM Application
	Settings ApmApplicationSettings `json:"settings"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *ApmApplicationEntityOutline) ImplementsApmBrowserApplicationEntityOutline() {}

func (x *ApmApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ApmApplicationEntityOutline) ImplementsEntityOutline() {}

// ApmApplicationRunningAgentVersions - Represents the currently running agent versions in an APM Application.
// An application could be running multiple versions of an agent (across different hosts, for example).
type ApmApplicationRunningAgentVersions struct {
	// The maximum (newest) language agent version running in the APM Application.
	MaxVersion string `json:"maxVersion"`
	// The minimum (oldest) language agent version running in the APM Application.
	MinVersion string `json:"minVersion"`
}

// ApmApplicationSettings - Configuration settings for the APM Application
type ApmApplicationSettings struct {
	// The current Apdex target setting
	ApdexTarget float64 `json:"apdexTarget"`
	// State of server-side configuration setting
	ServerSideConfig bool `json:"serverSideConfig"`
}

// ApmApplicationSummaryData - Summary statistics about the APM App.
type ApmApplicationSummaryData struct {
	// The apdex score. For more details on the use of apdex, visit [our docs](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).
	ApdexScore float64 `json:"apdexScore"`
	// The percentage of responses to all transactions with an error.
	ErrorRate float64 `json:"errorRate"`
	// The number of hosts this application is running on.
	HostCount int `json:"hostCount"`
	// The number of instances of this application running.
	InstanceCount int `json:"instanceCount"`
	// The average response time for non-web transactions in seconds.
	NonWebResponseTimeAverage Seconds `json:"nonWebResponseTimeAverage"`
	// The number of non-web transactions per minute.
	NonWebThroughput float64 `json:"nonWebThroughput"`
	// The average response time for all transactions in seconds.
	ResponseTimeAverage Seconds `json:"responseTimeAverage"`
	// The number of all transactions per minute.
	Throughput float64 `json:"throughput"`
	// The average response time for web transactions in seconds.
	WebResponseTimeAverage Seconds `json:"webResponseTimeAverage"`
	// The number of web transactions per minute.
	WebThroughput float64 `json:"webThroughput"`
}

// ApmBrowserApplicationEntity - The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntity struct {
	//
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary"`
}

func (x *ApmBrowserApplicationEntity) ImplementsApmBrowserApplicationEntity() {}

// ApmBrowserApplicationSummaryData - Summary statistics about the Browser App injected by the APM Application.
type ApmBrowserApplicationSummaryData struct {
	// The number of AJAX requests per minute
	AjaxRequestThroughput float64 `json:"ajaxRequestThroughput"`
	// The average AJAX response time in seconds.
	AjaxResponseTimeAverage Seconds `json:"ajaxResponseTimeAverage"`
	// The percentage of page views with a JS error.
	JsErrorRate float64 `json:"jsErrorRate"`
	// The number of page loads per minute
	PageLoadThroughput float64 `json:"pageLoadThroughput"`
	// The average page view time in seconds.
	PageLoadTimeAverage float64 `json:"pageLoadTimeAverage"`
}

// ApmDatabaseInstanceEntity - A database instance seen by an APM Application
type ApmDatabaseInstanceEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The host the database instance is running on.
	Host string `json:"host"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
	PortOrPath string `json:"portOrPath"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
	// The type of database. ex: `Postgres` | `Redis`
	Vendor string `json:"vendor"`
}

func (x *ApmDatabaseInstanceEntity) ImplementsEntity() {}

// ApmDatabaseInstanceEntityOutline - A database instance seen by an APM Application
type ApmDatabaseInstanceEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The host the database instance is running on.
	Host string `json:"host"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
	PortOrPath string `json:"portOrPath"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
	// The type of database. ex: `Postgres` | `Redis`
	Vendor string `json:"vendor"`
}

func (x *ApmDatabaseInstanceEntityOutline) ImplementsEntityOutline() {}

// ApmExternalServiceEntity - An external service seen by an APM Application.
type ApmExternalServiceEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	//
	ExternalSummary ApmExternalServiceSummaryData `json:"externalSummary"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The host of the external service.
	Host string `json:"host"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *ApmExternalServiceEntity) ImplementsEntity() {}

// ApmExternalServiceEntityOutline - An external service seen by an APM Application.
type ApmExternalServiceEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	//
	ExternalSummary ApmExternalServiceSummaryData `json:"externalSummary"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The host of the external service.
	Host string `json:"host"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *ApmExternalServiceEntityOutline) ImplementsEntityOutline() {}

// ApmExternalServiceSummaryData - Summary statistics about an External Service called by an APM App.
type ApmExternalServiceSummaryData struct {
	// The average response time for external service calls in seconds.
	ResponseTimeAverage Seconds `json:"responseTimeAverage"`
	// The number of external service calls per minute.
	Throughput float64 `json:"throughput"`
}

// BrowserApplicationEntity - A Browser Application entity.
type BrowserApplicationEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Browser App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Violations on the Browser App that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The ID of the Browser App.
	ApplicationID int `json:"applicationId"`
	// Summary statistics about the Browser App.
	BrowserSummary BrowserApplicationSummaryData `json:"browserSummary"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the Browser App.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The running versions of the agent in the Browser App.
	RunningAgentVersions BrowserApplicationRunningAgentVersions `json:"runningAgentVersions"`
	// The ID of the APM Application that serves this Browser App.
	ServingApmApplicationID *int `json:"servingApmApplicationId"`
	// Configuration settings for the Browser App
	Settings BrowserApplicationSettings `json:"settings"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *BrowserApplicationEntity) ImplementsAlertableEntity() {}

func (x *BrowserApplicationEntity) ImplementsEntity() {}

// BrowserApplicationEntityOutline - A Browser Application entity outline.
type BrowserApplicationEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Browser App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The ID of the Browser App.
	ApplicationID int `json:"applicationId"`
	// Summary statistics about the Browser App.
	BrowserSummary BrowserApplicationSummaryData `json:"browserSummary"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The running versions of the agent in the Browser App.
	RunningAgentVersions BrowserApplicationRunningAgentVersions `json:"runningAgentVersions"`
	// The ID of the APM Application that serves this Browser App.
	ServingApmApplicationID *int `json:"servingApmApplicationId"`
	// Configuration settings for the Browser App
	Settings BrowserApplicationSettings `json:"settings"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *BrowserApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *BrowserApplicationEntityOutline) ImplementsEntityOutline() {}

// BrowserApplicationRunningAgentVersions - Represents the currently running agent versions in a Browser App.
// An app could be running multiple versions of an agent (across different browsers, for example).
type BrowserApplicationRunningAgentVersions struct {
	// The maximum (newest) agent version running in the Browser App.
	MaxVersion int `json:"maxVersion"`
	// The minimum (oldest) agent version running in the Browser App.
	MinVersion int `json:"minVersion"`
}

// BrowserApplicationSettings - Configuration settings for the Browser App
type BrowserApplicationSettings struct {
	// The current Apdex target setting
	ApdexTarget float64 `json:"apdexTarget"`
}

// BrowserApplicationSummaryData - Summary statistics about the Browser App.
type BrowserApplicationSummaryData struct {
	// The number of AJAX requests per minute
	AjaxRequestThroughput float64 `json:"ajaxRequestThroughput"`
	// The average AJAX response time in seconds.
	AjaxResponseTimeAverage Seconds `json:"ajaxResponseTimeAverage"`
	// The percentage of page views with a JS error.
	JsErrorRate float64 `json:"jsErrorRate"`
	// The number of page loads per minute
	PageLoadThroughput float64 `json:"pageLoadThroughput"`
	// The average page view time in seconds.
	PageLoadTimeAverage float64 `json:"pageLoadTimeAverage"`
	// The median page view time in seconds.
	PageLoadTimeMedian float64 `json:"pageLoadTimeMedian"`
	// The average SPA response time in seconds.
	SpaResponseTimeAverage Seconds `json:"spaResponseTimeAverage"`
	// The median SPA response time in seconds.
	SpaResponseTimeMedian Seconds `json:"spaResponseTimeMedian"`
}

// CollectionEntity - A group of entities defined by entity search queries and specific GUIDs
type CollectionEntity struct {
	//
	GUID string `json:"guid"`
}

func (x *CollectionEntity) ImplementsCollectionEntity() {}

// DashboardEntity - A Dashboard entity.
type DashboardEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The parent entity `guid` of the dashboard.
	DashboardParentGUID string `json:"dashboardParentGuid"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *DashboardEntity) ImplementsEntity() {}

// DashboardEntityOutline - A Dashboard entity outline.
type DashboardEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The parent entity `guid` of the dashboard.
	DashboardParentGUID string `json:"dashboardParentGuid"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *DashboardEntityOutline) ImplementsEntityOutline() {}

// Entity - The `Entity` interface allows fetching detailed entity information for a single entity.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type Entity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *Entity) ImplementsEntity() {}

// EntityAlertViolation -
type EntityAlertViolation struct {
	// A link to the agent in the time window in which the violation occurred.
	AgentURL string `json:"agentUrl"`
	// The severity of the violation.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Timestamp of when the violation was closed.
	ClosedAt EpochMilliseconds `json:"closedAt"`
	// The description of the violation.
	Label string `json:"label"`
	// The priority of the violation.
	Level string `json:"level"`
	// Timestamp of when the violation was opened.
	OpenedAt EpochMilliseconds `json:"openedAt"`
	// The id of the violation.
	ViolationId int `json:"violationId"`
	// A link to the violation if it is connected to an incident.
	ViolationURL string `json:"violationUrl"`
}

// EntityOutline - The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *EntityOutline) ImplementsEntityOutline() {}

// EntityRelationship - An entity relationship
type EntityRelationship struct {
	// The source entity of the relationship.
	Source EntityRelationshipNode `json:"source"`
	// The target entity of the relationship.
	Target EntityRelationshipNode `json:"target"`
	// The type of the relationship. For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Type EntityRelationshipType `json:"type"`
}

// EntityRelationshipNode - A node in an Entity relationship.
type EntityRelationshipNode struct {
	// The Account ID for the relationship node.
	AccountID int `json:"accountId"`
	//
	Entity EntityOutline `json:"entity"`
	// The `EntityType` of the relationship node.
	EntityType EntityType `json:"entityType"`
	// The Entity `guid` for the relationship node.
	GUID string `json:"guid"`
}

// EntitySearch - A data structure that contains the detailed response of an entity search.
//
// The direct search result is available through `results`. Information about the
// query itself is availble through `query`, `types`, and `count`.
type EntitySearch struct {
	// The number of entities returned by the entity search.
	Count int `json:"count"`
	// A count of the Entity Search results faceted by a chosen set of criteria.
	//
	// Note: Unlike a NRQL facet, the facet results do not include entities where the facet value does not exist. Additionally, entities can be tagged with multiple tag values for one tag key. For these reasons, depending on the facet values chosen, the `counts` field will not always equal the `entitySearch.count` field.
	Counts []EntitySearchCounts `json:"counts"`
	// The entity search query string.
	Query string `json:"query"`
	// The paginated results of the entity search.
	Results EntitySearchResult `json:"results"`
	// The entity types returned by the entity search.
	Types []EntitySearchTypes `json:"types"`
}

// EntitySearchCounts - The groupings and counts of entities returned for the specified criteria.
type EntitySearchCounts struct {
	// The number of entities that match the specified criteria.
	Count int `json:"count"`
	// The group of entities returned for the specified criteria.
	Facet AttributeMap `json:"facet"`
}

// EntitySearchResult - A section of the entity search results. If there is a `nextCursor` present, there are more results available.
type EntitySearchResult struct {
	// The entities contained in this section of the entity search results.
	//
	// For information on New Relic entities, visit [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
	//
	// To see some query examples of entity information,
	// visit [our entity GraphQL API docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entities []EntityOutlineInterface `json:"entities"`
	// The next cursor for fetching additional paginated entity search results.
	NextCursor string `json:"nextCursor"`
}

// EntitySearchTypes - A detailed entity search response object type.
type EntitySearchTypes struct {
	// The number of results with this type.
	Count int `json:"count"`
	// The domain of the search result group.
	Domain string `json:"domain"`
	// The combined domain & type of the search result group.
	EntityType EntityType `json:"entityType"`
	// The type of the search result group.
	Type string `json:"type"`
}

// EntityTag - A tag that has been applied to an entity.
type EntityTag struct {
	// The tag's key
	Key string `json:"key"`
	// A list of the tag values
	Values []string `json:"values"`
}

// EntityTagValueWithMetadata - The value and metadata of a single entity tag.
type EntityTagValueWithMetadata struct {
	// Whether or not the tag can be mutated by the user.
	Mutable bool `json:"mutable"`
	// The tag value.
	Value string `json:"value"`
}

// EntityTagWithMetadata - The tags with metadata of the entity.
type EntityTagWithMetadata struct {
	// The tag's key.
	Key string `json:"key"`
	// A list of tag values with metadata information.
	Values []EntityTagValueWithMetadata `json:"values"`
}

// EventAttributeDefinition - A human-readable definition of an NRDB Event Type Attribute
type EventAttributeDefinition struct {
	// This attribute's category
	Category string `json:"category"`
	// A short description of this attribute
	Definition string `json:"definition"`
	// The New Relic docs page for this attribute
	DocumentationURL string `json:"documentationUrl"`
	// The human-friendly formatted name of the attribute
	Label string `json:"label"`
	// The name of the attribute
	Name string `json:"name"`
}

// EventDefinition - A human-readable definition of an NRDB Event Type
type EventDefinition struct {
	// A list of attribute definitions for this event type
	Attributes []EventAttributeDefinition `json:"attributes"`
	// A short description of this event
	Definition string `json:"definition"`
	// The human-friendly formatted name of the event
	Label string `json:"label"`
	// The name of the event
	Name string `json:"name"`
}

// GenericEntity - A generic entity.
type GenericEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *GenericEntity) ImplementsEntity() {}

// GenericEntityOutline - A generic entity outline.
type GenericEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *GenericEntityOutline) ImplementsEntityOutline() {}

// GenericInfrastructureEntity - An Infrastructure entity.
type GenericInfrastructureEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Recent violations on the Infrastructure entity.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the Infrastructure entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *GenericInfrastructureEntity) ImplementsInfrastructureIntegrationEntity() {}

func (x *GenericInfrastructureEntity) ImplementsAlertableEntity() {}

func (x *GenericInfrastructureEntity) ImplementsEntity() {}

// GenericInfrastructureEntityOutline - An Infrastructure entity outline.
type GenericInfrastructureEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *GenericInfrastructureEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {}

func (x *GenericInfrastructureEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *GenericInfrastructureEntityOutline) ImplementsEntityOutline() {}

// InfrastructureAwsLambdaFunctionEntity - An AWS Lambda Function entity.
type InfrastructureAwsLambdaFunctionEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Recent violations on the Infrastructure entity.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the Infrastructure entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	//
	Runtime string `json:"runtime"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsInfrastructureIntegrationEntity() {}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsAlertableEntity() {}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsEntity() {}

// InfrastructureAwsLambdaFunctionEntityOutline - An AWS Lambda Function entity outline.
type InfrastructureAwsLambdaFunctionEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	//
	Runtime string `json:"runtime"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {
}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsEntityOutline() {}

// InfrastructureHostEntity - An Infrastructure Host entity.
type InfrastructureHostEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Recent violations on the Infrastructure entity.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	//
	HostSummary InfrastructureHostSummaryData `json:"hostSummary"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the Infrastructure entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *InfrastructureHostEntity) ImplementsAlertableEntity() {}

func (x *InfrastructureHostEntity) ImplementsEntity() {}

// InfrastructureHostEntityOutline - An Infrastructure Host entity outline.
type InfrastructureHostEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	//
	HostSummary InfrastructureHostSummaryData `json:"hostSummary"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *InfrastructureHostEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *InfrastructureHostEntityOutline) ImplementsEntityOutline() {}

// InfrastructureHostSummaryData - Summary statistics about the Infra Host.
type InfrastructureHostSummaryData struct {
	// Total CPU utilization as a percentage.
	CpuUtilizationPercent float64 `json:"cpuUtilizationPercent"`
	// The cumulative disk fullness percentage.
	DiskUsedPercent float64 `json:"diskUsedPercent"`
	// Total memory utilization as a percentage.
	MemoryUsedPercent float64 `json:"memoryUsedPercent"`
	// The number of bytes per second received during the sampling period.
	NetworkReceiveRate float64 `json:"networkReceiveRate"`
	// The number of bytes sent per second during the sampling period.
	NetworkTransmitRate float64 `json:"networkTransmitRate"`
	// Number of services running on the host.
	ServicesCount int `json:"servicesCount"`
}

// InfrastructureIntegrationEntity -
type InfrastructureIntegrationEntity struct {
	//
	IntegrationTypeCode string `json:"integrationTypeCode"`
}

func (x *InfrastructureIntegrationEntity) ImplementsInfrastructureIntegrationEntity() {}

// MobileAppSummaryData - Mobile application summary data
type MobileAppSummaryData struct {
	// The number of times the app has been launched.
	AppLaunchCount int `json:"appLaunchCount"`
	// The number of crashes.
	CrashCount int `json:"crashCount"`
	// Crash rate is percentage of crashes per sessions.
	CrashRate float64 `json:"crashRate"`
	// Error rate is the percentage of http errors per successful requests.
	HttpErrorRate float64 `json:"httpErrorRate"`
	// The number of http requests.
	HttpRequestCount int `json:"httpRequestCount"`
	// The rate of http requests per minute.
	HttpRequestRate float64 `json:"httpRequestRate"`
	// The average response time for all http calls.
	HttpResponseTimeAverage Seconds `json:"httpResponseTimeAverage"`
	// The number of mobile sessions.
	MobileSessionCount int `json:"mobileSessionCount"`
	// Network failure rate is the percentage of network failures per successful requests.
	NetworkFailureRate float64 `json:"networkFailureRate"`
	// The number of users affected by crashes.
	UsersAffectedCount int `json:"usersAffectedCount"`
}

// MobileApplicationEntity - A Mobile Application entity.
type MobileApplicationEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Mobile App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Violations on the Mobile App that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The ID of the Mobile App.
	ApplicationID int `json:"applicationId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// Summary statistics about the Mobile App.
	MobileSummary MobileAppSummaryData `json:"mobileSummary"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the Mobile App.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *MobileApplicationEntity) ImplementsAlertableEntity() {}

func (x *MobileApplicationEntity) ImplementsEntity() {}

// MobileApplicationEntityOutline - A Mobile Application entity outline.
type MobileApplicationEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Mobile App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The ID of the Mobile App.
	ApplicationID int `json:"applicationId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// Summary statistics about the Mobile App.
	MobileSummary MobileAppSummaryData `json:"mobileSummary"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *MobileApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *MobileApplicationEntityOutline) ImplementsEntityOutline() {}

// NRDBMetadata - An object containing metadata about the query and result.
type NRDBMetadata struct {
	// A list of the event types that were queried.
	EventTypes []string `json:"eventTypes"`
	// A list of facets that were queried.
	Facets []string `json:"facets"`
	// Messages from NRDB included with the result.
	Messages []string `json:"messages"`
	// Details about the query time window.
	TimeWindow NRDBMetadataTimeWindow `json:"timeWindow"`
}

// NRDBMetadataTimeWindow - An object representing details about a query's time window.
type NRDBMetadataTimeWindow struct {
	// Timestamp marking the query begin time.
	Begin EpochMilliseconds `json:"begin"`
	// A clause representing the comparison time window.
	CompareWith string `json:"compareWith"`
	// Timestamp marking the query end time.
	End EpochMilliseconds `json:"end"`
	// SINCE clause resulting from the query
	Since string `json:"since"`
	// UNTIL clause resulting from the query
	Until string `json:"until"`
}

// NRDBResultContainer - A data structure that contains the results of the NRDB query along
// with other capabilities that enhance those results.
//
// Direct query results are available through `results`, `totalResult` and
// `otherResult`. The query you made is accessible through `nrql`, along with
// `metadata` about the query itself. Enhanced capabilities include
// `eventDefinitions`, `suggestedFacets` and more.
type NRDBResultContainer struct {
	// In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
	CurrentResults []NRDBResult `json:"currentResults"`
	// Generate a publicly sharable Embedded Chart URL for the NRQL query.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-charts).
	EmbeddedChartURL string `json:"embeddedChartUrl"`
	// Retrieve a list of event type definitions, providing descriptions
	// of the event types returned by this query, as well as details
	// of their attributes.
	EventDefinitions []EventDefinition `json:"eventDefinitions"`
	// Metadata about the query and result.
	Metadata NRDBMetadata `json:"metadata"`
	// The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.
	NRQL NRQL `json:"nrql"`
	// In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_
	// contained in an individual `results` facet
	OtherResult NRDBResult `json:"otherResult"`
	// In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
	PreviousResults []NRDBResult `json:"previousResults"`
	// The query results. This is a flat list of objects who's structure matches the query submitted.
	Results []NRDBResult `json:"results"`
	// Generate a publicly sharable static chart URL for the NRQL query.
	StaticChartURL string `json:"staticChartUrl"`
	// Retrieve a list of suggested NRQL facets for this NRDB query, to be used with
	// the `FACET` keyword in NRQL.
	//
	// Results are based on historical query behaviors.
	//
	// If the query already has a `FACET` clause, it will be ignored for the purposes
	// of suggesting facets.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/nerdgraph-graphiql-nrql-tutorial#suggest-facets).
	SuggestedFacets []NRQLFacetSuggestion `json:"suggestedFacets"`
	// Suggested queries that could help explain an anomaly in your timeseries based on either statistical differences in the data or historical usage.
	//
	// If no `anomalyTimeWindow` is supplied, we will attempt to detect a spike in the NRQL results. If no spike is found, the suggested query results will be empty.
	//
	// Input NRQL must be a TIMESERIES query and must have exactly one result.
	SuggestedQueries SuggestedNRQLQueryResponse `json:"suggestedQueries"`
	// In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,
	// whether or not they are contained in an individual `results` facet
	TotalResult NRDBResult `json:"totalResult"`
}

// NRQLFacetSuggestion - A suggested NRQL facet. Facet suggestions may be either a single attribute, or
// a list of attributes in the case of multi-attribute facet suggestions.
type NRQLFacetSuggestion struct {
	// A list of attribute names comprising the suggested facet.
	//
	// Raw attribute names will be returned here. Attribute names may need to be
	// backtick-quoted before inclusion in a NRQL query.
	Attributes []string `json:"attributes"`
	// A modified version of the input NRQL, with a `FACET ...` clause appended.
	// If the original NRQL had a `FACET` clause already, it will be replaced.
	NRQL NRQL `json:"nrql"`
}

// NerdStorageCollectionMember -
type NerdStorageCollectionMember struct {
	// The NerdStorage document.
	Document NerdStorageDocument `json:"document"`
	// The documentId.
	ID string `json:"id"`
}

// NerdStorageEntityScope -
type NerdStorageEntityScope struct {
	//
	Collection []NerdStorageCollectionMember `json:"collection"`
	//
	Document NerdStorageDocument `json:"document"`
}

// SuggestedAnomalyBasedNRQLQuery - A query suggestion based on analysis of events within a specific anomalous time
// range vs. nearby events outside of that time range.
type SuggestedAnomalyBasedNRQLQuery struct {
	// Information about the anomaly upon which this suggestion is based
	Anomaly SuggestedNRQLQueryAnomaly `json:"anomaly"`
	// The NRQL string to run for the suggested query
	NRQL string `json:"nrql"`
	// A human-readable title describing what the query shows
	Title string `json:"title"`
}

func (x *SuggestedAnomalyBasedNRQLQuery) ImplementsSuggestedNRQLQuery() {}

// SuggestedHistoryBasedNRQLQuery - query suggestion based on historical query patterns.
type SuggestedHistoryBasedNRQLQuery struct {
	// The NRQL string to run for the suggested query
	NRQL string `json:"nrql"`
	// A human-readable title describing what the query shows
	Title string `json:"title"`
}

func (x *SuggestedHistoryBasedNRQLQuery) ImplementsSuggestedNRQLQuery() {}

// SuggestedNRQLQuery - Interface type representing a query suggestion.
type SuggestedNRQLQuery struct {
	// The NRQL string to run for the suggested query
	NRQL string `json:"nrql"`
	// A human-readable title describing what the query shows
	Title string `json:"title"`
}

func (x *SuggestedNRQLQuery) ImplementsSuggestedNRQLQuery() {}

// SuggestedNRQLQueryAnomaly - Information about the anomaly upon which this analysis was based.
type SuggestedNRQLQueryAnomaly struct {
	// The approximate time range of the anomalous region
	TimeWindow TimeWindow `json:"timeWindow"`
}

// SuggestedNRQLQueryResponse - result type encapsulating suggested queries
type SuggestedNRQLQueryResponse struct {
	// List of suggested queries.
	Suggestions []SuggestedNRQLQueryInterface `json:"suggestions"`
}

// SyntheticMonitorEntity - A Synthetic Monitor entity.
type SyntheticMonitorEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Synthetic Monitor entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Violations on the Synthetics Monitor that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The Synthetic Monitor ID
	MonitorId int `json:"monitorId"`
	// Summary statistics for the Synthetic Monitor.
	MonitorSummary SyntheticMonitorSummaryData `json:"monitorSummary"`
	// The Synthetic Monitor type
	MonitorType SyntheticMonitorType `json:"monitorType"`
	// The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.
	MonitoredURL string `json:"monitoredUrl"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The duration in minutes between Synthetic Monitor runs.
	Period Minutes `json:"period"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the Synthetics Monitor.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *SyntheticMonitorEntity) ImplementsAlertableEntity() {}

func (x *SyntheticMonitorEntity) ImplementsEntity() {}

// SyntheticMonitorEntityOutline - A Synthetic Monitor entity outline.
type SyntheticMonitorEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the Synthetic Monitor entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The Synthetic Monitor ID
	MonitorId int `json:"monitorId"`
	// Summary statistics for the Synthetic Monitor.
	MonitorSummary SyntheticMonitorSummaryData `json:"monitorSummary"`
	// The Synthetic Monitor type
	MonitorType SyntheticMonitorType `json:"monitorType"`
	// The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.
	MonitoredURL string `json:"monitoredUrl"`
	// The name of this entity.
	Name string `json:"name"`
	// The duration in minutes between Synthetic Monitor runs.
	Period Minutes `json:"period"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *SyntheticMonitorEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *SyntheticMonitorEntityOutline) ImplementsEntityOutline() {}

// SyntheticMonitorSummaryData - Summary statistics for the Synthetic Monitor.
type SyntheticMonitorSummaryData struct {
	// The number of locations that are currently failing.
	LocationsFailing int `json:"locationsFailing"`
	// The number of locations that are currently running.
	LocationsRunning int `json:"locationsRunning"`
	// The percentage of successful synthetic monitor checks in the last 24 hours.
	SuccessRate float64 `json:"successRate"`
}

// ThirdPartyServiceEntity - A third party service entity.
type ThirdPartyServiceEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *ThirdPartyServiceEntity) ImplementsEntity() {}

// ThirdPartyServiceEntityOutline - A third party service entity outline.
type ThirdPartyServiceEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *ThirdPartyServiceEntityOutline) ImplementsEntityOutline() {}

// TimeWindow - Represents a time window.
type TimeWindow struct {
	// The end time of the time window the number of milliseconds since the Unix epoch.
	EndTime EpochMilliseconds `json:"endTime"`
	// The start time of the time window the number of milliseconds since the Unix epoch.
	StartTime EpochMilliseconds `json:"startTime"`
}

// UnavailableEntity - An entity that is unavailable.
type UnavailableEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
}

func (x *UnavailableEntity) ImplementsEntity() {}

// UnavailableEntityOutline - An entity outline that is unavailable.
type UnavailableEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
}

func (x *UnavailableEntityOutline) ImplementsEntityOutline() {}

// WorkloadEntity - A workload entity.
type WorkloadEntity struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the workload entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// Violations on the members of the workload that were open during the specified time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// Recent violations on the members of the workload.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata"`
	// The entity's type
	Type string `json:"type"`
	// Status of the workload.
	WorkloadStatus WorkloadStatus `json:"workloadStatus"`
}

func (x *WorkloadEntity) ImplementsAlertableEntity() {}

func (x *WorkloadEntity) ImplementsCollectionEntity() {}

func (x *WorkloadEntity) ImplementsEntity() {}

// WorkloadEntityOutline - A workload entity outline.
type WorkloadEntityOutline struct {
	//
	Account AccountOutline `json:"account"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId"`
	// The current alerting severity of the workload entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity"`
	// The entity's domain
	Domain string `json:"domain"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType"`
	// A unique entity identifier.
	GUID string `json:"guid"`
	// The time the entity was indexed.
	IndexedAt EpochMilliseconds `json:"indexedAt"`
	// The name of this entity.
	Name string `json:"name"`
	// The url to the entity.
	Permalink string `json:"permalink"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags"`
	// The entity's type
	Type string `json:"type"`
	// Status of the workload.
	WorkloadStatus WorkloadStatus `json:"workloadStatus"`
}

func (x *WorkloadEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *WorkloadEntityOutline) ImplementsEntityOutline() {}

// WorkloadStatus - Detailed information about the status of a workload.
type WorkloadStatus struct {
	// A description that provides additional details about the status of the workload.
	Description string `json:"description"`
	// Indicates where the status value derives from.
	StatusSource WorkloadStatusSource `json:"statusSource"`
	// The status of the workload.
	StatusValue WorkloadStatusValue `json:"statusValue"`
	// A short description of the status of the workload.
	Summary string `json:"summary"`
}

// AttributeMap - This scalar represents a map of attributes in the form of key-value pairs.
type AttributeMap string

// EpochMilliseconds - The `EpochMilliseconds` scalar represents the number of milliseconds since the Unix epoch
type EpochMilliseconds serialization.EpochTime

// Minutes - The `Minutes` scalar represents a duration in minutes
type Minutes int

// NRDBResult - This scalar represents a NRDB Result. It is a `Map` of `String` keys to values.
//
// The shape of these objects reflect the query used to generate them, the contents
// of the objects is not part of the GraphQL schema.
type NRDBResult string

// NRQL - This scalar represents a NRQL query string.
//
// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about NRQL syntax.
type NRQL string

// NerdStorageDocument - This scalar represents a NerdStorage document.
type NerdStorageDocument string

// Seconds - The `Seconds` scalar represents a duration in seconds
type Seconds string

// AlertableEntity -
type AlertableEntityInterface interface {
	ImplementsAlertableEntity()
}

// ApmBrowserApplicationEntity - The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityInterface interface {
	ImplementsApmBrowserApplicationEntity()
}

// CollectionEntity - A group of entities defined by entity search queries and specific GUIDs
type CollectionEntityInterface interface {
	ImplementsCollectionEntity()
}

// Entity - The `Entity` interface allows fetching detailed entity information for a single entity.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityInterface interface {
	ImplementsEntity()
}

// EntityOutline - The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityOutlineInterface interface {
	ImplementsEntityOutline()
}

// InfrastructureIntegrationEntity -
type InfrastructureIntegrationEntityInterface interface {
	ImplementsInfrastructureIntegrationEntity()
}

// SuggestedNRQLQuery - Interface type representing a query suggestion.
type SuggestedNRQLQueryInterface interface {
	ImplementsSuggestedNRQLQuery()
}
